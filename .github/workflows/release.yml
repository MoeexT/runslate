name: Release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
    contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Print env info
        run: |
          cat /proc/cpuinfo
          free -h
          rustc --version
          rustup show
          cargo --version
      - uses: actions/checkout@v3
      - run: cargo check
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: cargo test
  build:
    name: build
    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        build: [linux, macos, macos-arm64, windows]
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            archive-name: runslate-x86_64-unknown-linux-gnu

          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            archive-name: runslate-x86_64-apple-darwin

          - build: macos-arm64
            os: macos-12
            rust: stable
            target: aarch64-apple-darwin
            archive-name: runslate-aarch64-apple-darwin

          - build: windows
            os: windows-2019
            rust: stable
            target: x86_64-pc-windows-gnu
            archive-name: runslate-x86_64-pc-windows-gnu
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: "${{ matrix.rust }}"
          profile: minimal
          override: true
          target: "${{ matrix.target }}"
        
      - name: Install cargo-get
        run: cargo install cargo-get

      - name: Build binary
        run: cargo build --release --target "${{ matrix.target }}"
        env:
          RUST_BACKTRACE: 1

      - name: Strip binary (linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: strip "target/${{ matrix.target }}/release/runslate"

      - name: Build archive
        shell: bash
        run: |
          release_version=$(cargo get version)
          echo "release_version=${release_version}" >> "${GITHUB_ENV}"
          mkdir archive
          cp LICENSE README.md archive/
          cd archive
          if [ "${{ matrix.build }}" = "windows" ]; then
            cp "../target/${{ matrix.target }}/release/runslate.exe" ./runslate.exe
            7z a "${{ matrix.archive-name }}-v${release_version}.7z" LICENSE README.md runslate.exe
          else
            cp "../target/${{ matrix.target }}/release/runslate" ./runslate
            tar -czf "${{ matrix.archive-name }}-v${release_version}.tar.gz" LICENSE README.md runslate
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.archive-name }}"
          path: "archive/${{ matrix.archive-name }}"

      - uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          tag: "${{ env.release_version }}"
          artifacts: "archive/${{ matrix.archive-name }}*"
          token: "${{ secrets.GITHUB_TOKEN }}"
